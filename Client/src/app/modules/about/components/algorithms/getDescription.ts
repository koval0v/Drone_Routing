import { TheNearestNeighbourTypes } from "src/app/models/enums/TheNearestNeighbourTypes.model"
import { TheNearestToTheLineTypes } from "src/app/models/enums/TheNearestToTheLineTypes.model";

export function getAlgorithmsDescription(type: TheNearestNeighbourTypes | TheNearestToTheLineTypes): string {
  switch (type) {
    case TheNearestNeighbourTypes.Standard:
      return standardNearestNeighbourDescription;
    case TheNearestNeighbourTypes.InTheArea:
      return areaNearestNeighbourDescription;
    case TheNearestNeighbourTypes.Parallel:
      return parallelNearestNeighbourDescription;
    case TheNearestToTheLineTypes.OrderingByX:
      return xOrderNearestToTheLineDescription;
    case TheNearestToTheLineTypes.OrderingByDistances:
      return matrixOrderNearestToTheLineDescription;
    default:
      return "";;
  };
};

const standardNearestNeighbourDescription: string = `Між всіма об’єктами та базами розраховуються евклідові відстані, що утворюють матрицю відстаней.
В залежності від вказаної середньої швидкості дрона та запасу часового ресурсу обчислюється
максимальна відстань, яку може пролетіти дрон на середній швидкості.\n
Алгоритм розпочинає роботу з точки на площині XY, що представляє початкову базу. По відстаням до
інших об’єктів, що ще не були включені в результуючий маршрут, обирається найближчий до початкової
бази. Якщо найближчих сусідів декілька, то за допомогою алгоритму TOPSIS* обирається оптимальний.\n
При виборі кожного наступного до поточної точки найближчого сусіда проводиться аналіз відстаней чи
матиме змогу дрон, перелетівши до даного сусіда, долетіти до кінцевої бази. Тільки після успішної
перевірки обраний найближчий сусід додається до маршруту, а також позначається поточною точкою.\n
Якщо найближчим сусідом обрано кінцеву базу, то аналізується наступний найближчий сусід, щоб не
допустити закінчення побудови маршруту при наявності запасу ресурсу.\n
Алгоритм триває доти, поки буде існувати хоча б один об’єкт, що є найближчим сусідом до поточної
точки, додаючи який в маршрут, дрон матиме ресурс долетіти до кінцевої бази, або поки в маршрут
не буде додано всі об’єкти згенерованої задачі.\n

*Основна ідея методу TOPSIS полягає у концепції пошуку компромісного розв’язку при виборі
найкращої альтернативи, яка б була найближчою до позитивного ідеального розв’язку (скорочено PIS,
або утопічної точки чи оптимального розв’язку) та найвіддаленішим від негативного ідеального
розв’язку (скорочено NIS, або антиутопічної точки).\n
Між всіма об’єктами та базами розраховуються евклідові відстані, що утворюють матрицю відстаней.
В залежності від вказаної середньої швидкості дрона та запасу часового ресурсу обчислюється
максимальна відстань, яку може пролетіти дрон на середній швидкості.`;

const areaNearestNeighbourDescription: string = `Між всіма об’єктами та базами розраховуються евклідові відстані, що утворюють матрицю відстаней.
В залежності від вказаної середньої швидкості дрона та запасу часового ресурсу обчислюється
максимальна відстань, яку може пролетіти дрон на середній швидкості.\n
Обраховується відстань кожного з об’єктів до прямої, що з’єднує бази. Найдовша з цих відстаней
складає максимальну ширину площі, в якій розташовані згенеровані об’єкти на мапі.\n
Алгоритм працює експериментально шляхом зміни ширини ділянки на 5% від максимальної. Алгоритм
розпочинає роботу з точки на площині XY, що представляє початкову базу. По відстаням до інших
об’єктів, що ще не були включені в результуючий маршрут та розташовані в межах ділянки, обирається
найближчий до початкової бази. Якщо найближчих сусідів декілька, то за допомогою алгоритму
TOPSIS* обирається оптимальний.\n
При виборі кожного наступного до поточної точки найближчого сусіда проводиться аналіз відстаней чи
матиме змогу дрон, перелетівши до даного сусіда, долетіти до кінцевої бази. Тільки після успішної
перевірки обраний найближчий сусід додається до маршруту, а також позначається поточною точкою.\n
Якщо найближчим сусідом обрано кінцеву базу, то аналізується наступний найближчий сусід, щоб не
допустити закінчення побудови маршруту при наявності запасу ресурсу.\n
З кожною наступною ітерацією ширина ділянки збільшується на 5%. Алгоритм триває доти, поки
побудований в межах поточної (збільшеної попередньої) ділянки маршрут є кращим за попередній,
тобто складається з більшої кількості об’єктів або має стільки ж об’єктів, але меншу довжину, або поки
не буде досягнуто максимальної ширини ділянки.\n

*Основна ідея методу TOPSIS полягає у концепції пошуку компромісного розв’язку при виборі
найкращої альтернативи, яка б була найближчою до позитивного ідеального розв’язку (скорочено PIS,
або утопічної точки чи оптимального розв’язку) та найвіддаленішим від негативного ідеального
розв’язку (скорочено NIS, або антиутопічної точки).\n
Між всіма об’єктами та базами розраховуються евклідові відстані, що утворюють матрицю відстаней.
В залежності від вказаної середньої швидкості дрона та запасу часового ресурсу обчислюється
максимальна відстань, яку може пролетіти дрон на середній швидкості.`;

const parallelNearestNeighbourDescription: string = `Між всіма об’єктами та базами розраховуються евклідові відстані, що утворюють матрицю відстаней.
В залежності від вказаної середньої швидкості дрона та запасу часового ресурсу обчислюється
максимальна відстань, яку може пролетіти дрон на середній швидкості.\n
Обраховується відстань кожного з об’єктів до прямої, що з’єднує бази. Найдовша з цих відстаней
складає максимальну ширину площі, в якій розташовані згенеровані об’єкти на мапі.\n
Даний алгоритм почергово шукає найближчих сусідів для кожної з баз: спочатку – відносно початкової,
на другій ітерації – відносно кінцевої, потім – знову початкової і так далі. По відстаням до інших об’єктів,
що ще не були включені в результуючий маршрут та розташовані в межах ділянки, обирається
найближчий до початкової бази. Якщо найближчих сусідів декілька, то за допомогою алгоритму
TOPSIS* обирається оптимальний.\n
Обраний об’єкт додається до маршруту: якщо він є найближчим відносно початкової бази, то додається
після останнього доданого найближчого сусіда відносно початкової бази, інакше – перед останнім
доданим сусідом відносно кінцевої бази. Розраховується загальна довжина нового маршруту. Якщо
дана довжина перевищує максимальну, то остання додана точка видаляється з тимчасового маршруту,
інакше – алгоритм обирає наступний за відстанню найближчий об’єкт до паралельної бази.\n
Алгоритм триває доти, поки не буде знайдено першого найближчого об’єкта до бази, додавання якого
в тимчасовий маршрут перевищить запас ресурсу, або поки в маршрут не буде додано всі об’єкти
згенерованої задачі.\n

*Основна ідея методу TOPSIS полягає у концепції пошуку компромісного розв’язку при виборі
найкращої альтернативи, яка б була найближчою до позитивного ідеального розв’язку (скорочено PIS,
або утопічної точки чи оптимального розв’язку) та найвіддаленішим від негативного ідеального
розв’язку (скорочено NIS, або антиутопічної точки).\n
Між всіма об’єктами та базами розраховуються евклідові відстані, що утворюють матрицю відстаней.
В залежності від вказаної середньої швидкості дрона та запасу часового ресурсу обчислюється
максимальна відстань, яку може пролетіти дрон на середній швидкості.`;

const xOrderNearestToTheLineDescription: string = `Даний алгоритм побудований на відстанях кожного об’єкта маршруту до прямої, що з’єднує точки
розташування початкової та кінцевої баз. Чим точка ближча до прямої, тим більша ймовірність, що її
можна встигнути обстежити і не досягнути обмеження у відстані. Це обумовлено тим, що навіть якщо
пролетіти маршрут по прямій від точки зльоту до точки посадки дрона, то декілька точок, що дуже
близькі за розташуванням до даної прямої, з великою ймовірністю можна включити до маршруту.\n
Будується пряма, що з’єднує початкову та кінцеву базу. Між всіма об’єктами та даною прямою
розраховуються відстані. В залежності від вказаної середньої швидкості дрона та запасу часового
ресурсу обчислюється максимальна відстань, яку може пролетіти дрон на середній швидкості.\n
По відстаням об’єктів до прямої, що ще не були включені в результуючий маршрут, обирається найближчий до прямої.\n
Обраний об’єкт додається до маршруту. Всі об’єкти даного тимчасового маршруту впорядковуються за
неспаданням координати X. Розраховується загальна довжина нового маршруту. Якщо дана довжина
перевищує максимальну, то остання додана точка видаляється з тимчасового маршруту, інакше –
алгоритм обирає наступний за відстанню найближчий об’єкт до прямої між базами і повторює ітерацію.\n
Алгоритм триває доти, поки не буде знайдено першого найближчого об’єкта до прямої, додавання
якого в тимчасовий маршрут перевищить запас ресурсу, або поки в маршрут не буде додано всі об’єкти
згенерованої задачі.`;

const matrixOrderNearestToTheLineDescription: string = `Даний алгоритм побудований на відстанях кожного об’єкта маршруту до прямої, що з’єднує точки
розташування початкової та кінцевої баз. Чим точка ближча до прямої, тим більша ймовірність, що її
можна встигнути обстежити і не досягнути обмеження у відстані. Це обумовлено тим, що навіть якщо
пролетіти маршрут по прямій від точки зльоту до точки посадки дрона, то декілька точок, що дуже
близькі за розташуванням до даної прямої, з великою ймовірністю можна включити до маршруту.\n
Будується пряма, що з’єднує початкову та кінцеву базу. Між всіма об’єктами та даною прямою
розраховуються відстані. Додатково будується матриця відстаней, що описує відстані між всіма
об’єктами та базами на мапі. В залежності від вказаної середньої швидкості дрона та запасу часового
ресурсу обчислюється максимальна відстань, яку може пролетіти дрон на середній швидкості.\n
По відстаням об’єктів до прямої, що ще не були включені в результуючий маршрут, обирається найближчий до прямої.\n
За матрицею відстаней знаходимо найближчого сусіда до обраного об’єкта серед тих, що вже наявні в
маршруті. Даний об’єкт додається до маршруту після знайденого об’єкта-сусіда. Розраховується
загальна довжина нового маршруту. Якщо дана довжина перевищує максимальну, то остання додана
точка видаляється з тимчасового маршруту, інакше – алгоритм обирає наступний за відстанню
найближчий об’єкт до прямої між базами і повторює ітерацію.\n
Алгоритм триває доти, поки не буде знайдено першого найближчого об’єкта до прямої, додавання
якого в тимчасовий маршрут перевищить запас ресурсу, або поки в маршрут не буде додано всі об’єкти
згенерованої задачі.`;
